/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { TestContract1 } from "../TestContract1";

export class TestContract1__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<TestContract1> {
    return super.deploy(overrides || {}) as Promise<TestContract1>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TestContract1 {
    return super.attach(address) as TestContract1;
  }
  connect(signer: Signer): TestContract1__factory {
    return super.connect(signer) as TestContract1__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestContract1 {
    return new Contract(address, _abi, signerOrProvider) as TestContract1;
  }
}

const _abi = [
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [],
    name: "getValue",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "ownerable",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_val",
        type: "string",
      },
    ],
    name: "setValue",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "val",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506104c8806100206000396000f3fe60806040526004361061003f5760003560e01c8063209652551461007b5780633c6bb4361461009057806393a09352146100bb578063df226fa4146100db575b6100796040518060400160405280601981526020017848656c6c6f2066726f6d2046616365742066616c6c6261636b60381b8152506100f0565b005b34801561008757600080fd5b50610079610136565b34801561009c57600080fd5b506100a5610172565b6040516100b291906103ec565b60405180910390f35b3480156100c757600080fd5b506100796100d636600461033c565b610200565b3480156100e757600080fd5b50610079610251565b6101338160405160240161010491906103ec565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b179052610282565b50565b6101706040518060400160405280601981526020017848656c6c6f2066726f6d2066616365742067657456616c756560381b8152506100f0565b565b6000805461017f90610441565b80601f01602080910402602001604051908101604052809291908181526020018280546101ab90610441565b80156101f85780601f106101cd576101008083540402835291602001916101f8565b820191906000526020600020905b8154815290600101906020018083116101db57829003601f168201915b505050505081565b61023a6040518060400160405280601981526020017848656c6c6f2066726f6d2066616365742073657456616c756560381b8152506100f0565b805161024d9060009060208401906102a3565b5050565b6101706040518060400160405280601081526020016f2432b6363790333937b69037bbb732b960811b8152506100f0565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b8280546102af90610441565b90600052602060002090601f0160209004810192826102d15760008555610317565b82601f106102ea57805160ff1916838001178555610317565b82800160010185558215610317579182015b828111156103175782518255916020019190600101906102fc565b50610323929150610327565b5090565b5b808211156103235760008155600101610328565b60006020828403121561034e57600080fd5b81356001600160401b038082111561036557600080fd5b818401915084601f83011261037957600080fd5b81358181111561038b5761038b61047c565b604051601f8201601f19908116603f011681019083821181831017156103b3576103b361047c565b816040528281528760208487010111156103cc57600080fd5b826020860160208301376000928101602001929092525095945050505050565b600060208083528351808285015260005b81811015610419578581018301518582016040015282016103fd565b8181111561042b576000604083870101525b50601f01601f1916929092016040019392505050565b600181811c9082168061045557607f821691505b6020821081141561047657634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220138f1e7bbbaeed23c0ffb5da7cc09631fb29b2307bd0d26c751614008fa7f5b664736f6c63430008070033";
